using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.IO.Ports;
using System.Runtime.Serialization;
using System.Collections.ObjectModel;
using System.Threading.Tasks;
using System.Threading;
using System.Linq;
using System.Windows.Controls;
using AutomationControls.Attributes;
using AutomationControls.Interfaces;
using AutomationControls.Extensions;

namespace *NS*        
{

	*ENUM*

    [Serializable]
    [DataProfile(typeof(*NS*.*CL*Control))]
    public class *CL* : *implement*, IProvideUserControls
    {
        public *CL*() 
        {
            Initialize();
        }

        private void Initialize() { *init* }

        *PROP*

        *ISerializable*

		#region IProvideUserControls

		public UserControl[] GetUserControls()
        {
            List<UserControl> lst = new List<UserControl>();
            UserControl cc = new UserControl();
            var attrs = (DataProfileAttribute[])this.GetType().GetCustomAttributes(typeof(DataProfileAttribute), false);
            foreach(var attr in attrs)
            {
                var type = ((DataProfileAttribute)attr).ClassName;
                cc = (UserControl)Activator.CreateInstance(type);
                if(cc == null) continue;
                lst.Add(cc);
                cc.DataContext = this;
            }
            return lst.ToArray();
        }

        #endregion

		public void Serialize(string s)
        {
            AutomationControls.Serialization.Serializer<*CL*> ser = new AutomationControls.Serialization.Serializer<*CL*>(this);
            ser.ToJSON(s);
        }

        public static *CL* Deserialize(string s)
        {
            AutomationControls.Serialization.Serializer<*CL*> ser = new AutomationControls.Serialization.Serializer<*CL*>();
            var res = ser.FromJSON( s);
            return res;
        }

    }

    [Serializable]
	[DataProfile(typeof(*NS*.*CL*ListControl))]
    public class *CL*List : ObservableCollection<*CL*> , ISerializable, IProvideUserControls
    {
		   public *CL*List() { }

           public *CL*List(IEnumerable<*CL*> lst) { lst.ForEach(x => this.Add(x));}

		    #region IProvideUserControls

        public UserControl[] GetUserControls()
        {
            List<UserControl> lst = new List<UserControl>();
            UserControl cc = new UserControl();											
            var attrs = (DataProfileAttribute[])this.GetType().GetCustomAttributes(typeof(DataProfileAttribute), false);
            foreach(var attr in attrs)
            {
                var type = ((DataProfileAttribute)attr).ClassName;
                cc = (UserControl)Activator.CreateInstance(type);
                if(cc == null) continue;
                lst.Add(cc);
                cc.DataContext = this;
            }
            return lst.ToArray();
        }

        #endregion

        #region ISerializable Members

        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("lst", this, this.GetType());
        }

        public *CL*List(SerializationInfo info, StreamingContext context)
        {
           
        }

        #endregion

		public void Serialize(string s)
        {
            AutomationControls.Serialization.Serializer<*CL*List> ser = new AutomationControls.Serialization.Serializer<*CL*List>(this);
            ser.ToJSON(s);
        }

        public static *CL*List Deserialize(string s)
        {
            AutomationControls.Serialization.Serializer<*CL*List> ser = new AutomationControls.Serialization.Serializer<*CL*List>();
            var res = ser.FromJSON( s);
            return res;
        }
    }
}

